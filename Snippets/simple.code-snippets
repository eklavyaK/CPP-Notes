{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"boilerplate": {
		"scope": "cpp",
		"prefix": "simple",
		"body": [
			"#define Compare(u) class Comp{public: bool operator() (u a, u b){return a.F < b.F;}};",
			"#define rapid_iostream ios_base::sync_with_stdio(0);cin.tie(0)",
			"#define _pq(u) priority_queue<u,vector<u>, Comp>",
			"#define binary(n,k) bitset<k>(n).to_string()",
			"#define println(n) cout<<n<<'\\n'",
			"#define Y() cout<<\"YES\"<<endl",
			"#define print(n) cout<<n<<' '",
			"#define N() cout<<\"NO\"<<endl",
			"#define pii pair<int,int>",
			"#define mod1 1000000007ll",
			"#define pli pair<ll,int>",
			"#define pil pair<int,ll>",
			"#define mod2 998244353ll",
			"#include<bits/stdc++.h>",
			"#define pll pair<ll,ll>",
			"typedef long double ld;",
			"typedef long long ll;",
			"#define mp make_pair",
			"using namespace std;",
			"#define endl '\\n'",
			"#define S second",
			"#define F first",
			"Compare(pii)",
			"/***************************************************MAIN PROGRAM*******************************************************/",
			"",
			"",
			"",
			"int main(){",
			"\trapid_iostream;",
			"\t$0",
			"\treturn 0;"
			"}",
		],
		"description": "simple"
	}
}