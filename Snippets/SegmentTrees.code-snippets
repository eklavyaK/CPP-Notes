{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gsegment_gtree",
		"body": [
			"const int N=1e5;",
			"ll tree[N*4];int a[N+5];",
			"void segmentTree(int node, int l, int r){",
			"	if(l==r){",
			"		tree[node]=a[l];",
			"		return;",
			"	}",
			"	int mid = (l+r)/2;",
			"	segmentTree(2*node,l,mid);",        
			"	segmentTree(2*node+1,mid+1,r);",
			"	tree[node] = max(tree[2*node],tree[2*node+1]);",   //building the segments using subsegments
			"}",
			"void update(int node, int l, int r, int x, int val){",
			"	if(l==r){tree[node]=val;return;}",
			"	int mid = (l+r)/2;",
			"	if(x<=mid) update(2*node,l,mid,x,val);",
			"	else update(2*node+1,mid+1,r,x,val);",
			"	tree[node]=max(tree[2*node],tree[2*node+1]);",
			"}",
			"ll query(int node, int l, int r, int st, int en){",
			"	if(en<l || st>r)return INT_MIN;",                //if range(l,r) doesn't contain any segment of range(st,en)
			"	if(st<=l && en>=r) return tree[node];",    //if range(l,r) completely lie inside the segment(st,en)
			"	int mid = (l+r)/2;",                                  
			"	return max(query(2*node,l,mid,st,en), query(2*node+1,mid+1,r,st,en));",
			"}",
		],
		"description": "segmentTree"
	}
