{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gfarthest_gmaximumminimum",
		"body": [
			"const int N = 2e5+5;    //farthest maximum will return the index of the strictly greater element",
			"vector<int> farthest_minimum(N,-1); //vector to contain the INDEX of the farthest minimum on the right of the element and -1 if not present",
			"vector<int> farthest_maximum(N,-1); //vector to contain the INDEX of the farthest maximum on the right of the element and -1 if not present",
			"void FarthestMaximumMinimum(vector<int> &v){",
			"	int n = v.size();",
			"	set<pair<int,int>> st;",
			"	for(int i=n-1;i>=0;i--){   //to find the left farthest minimum do forward loop",
			"		if(st.empty()){",
			"			st.insert({v[i],i});",
			"			continue;",
			"		}",
			"		auto it = st.lower_bound({v[i],0});",
			"		if(it==st.begin()){",
			"			farthest_minimum[i] = -1;",
			"			st.insert({v[i],i});",
			"		}",
			"		else{",
			"			it--;",
			"			farthest_minimum[i] = it->second;",
			"		}",
			"	}",
			"	st.clear();",
			"	for(int i=n-1;i>=0;i--){  //to find the left farthest maximum do forward loop",
			"		if(st.empty()){",
			"			st.insert({v[i],i});",
			"		}",
			"		auto it = st.upper_bound({v[i],N});",
			"		if(it==st.end()){",
			"			it--;",
			"			if(v[i]>it->first){",
			"				st.insert({v[i],i});",
			"			}",
			"		}",
			"		else{",
			"			farthest_maximum[i] = it->second;",
			"		}",
			"	}",
			"}",
		],
		"description": "Log output to console"
	}
}