{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gheavy_glight_gdecomposition",
		"body": [
			"const int N = 2e5 + 5;",
			"int pos, n;",
			"vector<int> id(N), dep(N), sC(N), bigc(N), up(N), par(N), Seg(N*4);",
			"vector<vector<int>> T;",

			"void dfssz(int u, int p){",
				"\tsC[u] = 1;",
				"\tfor(auto v : T[u]){",
					"\t\tif(v == p) continue;",
					"\t\tpar[v] = u, dep[v] = dep[u] + 1;",
					"\t\tdfssz(v, u);",
					"\t\tsC[u] += sC[v];",
					"\t\tbigc[u] = sC[bigc[u]] < sC[v] ? v : bigc[u];",
				"\t}",
			"}",
			"void dfsid(int u, int p){",
				"\tid[u] = pos++;",
				"\tif(bigc[u]) up[bigc[u]] = up[u], dfsid(bigc[u], u);",
				"\tfor(auto v : T[u]) if(v != p && v != bigc[u]) dfsid(v, u);",
			"}",
			"int lca(int u, int v){",
				"\twhile(up[u] != up[v]) dep[up[u]] > dep[up[v]] ? u = par[up[u]] : v = par[up[v]];",
				"\treturn dep[u] < dep[v] ? u : v;",
			"}",
			"void upd(int node, int l, int r, int pos, int c){",
				"\tif(l == r){",
					"\t\tSeg[node] = c;",
					"\t\treturn;",
				"\t}",
				"\tint mid = (l + r) >> 1;",
				"\tpos <= mid ? upd(2 * node, l, mid, pos, c) : upd(2 * node + 1, mid + 1, r, pos, c);",
				"\tSeg[node] = max(Seg[2 * node], Seg[2 * node + 1]);",
			"}",
			"int qry(int node, int l, int r, int st, int en){",
				"\tif(l > en || r < st || st > en) return 0;",
				"\tif(st <= l && r <= en) return Seg[node];",
				"\tint mid = (l + r) >> 1;",
				"\treturn max(qry(2 * node, l, mid, st, en), qry(2 * node + 1, mid + 1, r, st, en));",
			"}",
			"void update(int u, int val){",
				"\tupd(1, 0, n - 1, id[u], val);",
			"}",
			"int query(int u, int v){",
				"\tint mx = 0;",
				"\twhile (up[u] != up[v]){",
					"\t\tif(dep[up[u]] > dep[up[v]]) mx = max(mx, qry(1, 0, n - 1, id[up[u]], id[u])), u = par[up[u]];",
					"\t\telse mx = max(mx, qry(1, 0, n - 1, id[up[v]], id[v])), v = par[up[v]];",
				"\t}",
				"\tif(dep[u] > dep[v]) swap(u, v);",
				"\treturn max(mx, qry(1, 0, n - 1, id[u], id[v]));",
			"}",
			"void HLD(vector<vector<int>> Tree, int N){",
				"\tfor(int i = 0; i <= N*4; i++) Seg[i] = 0;",
				"\tfor(int i = 0; i <= N; i++) id[i] = dep[i] = sC[i] = bigc[i] = par[i] = 0, up[i] = i;",
				"\tdep[0] = -1, n = N, T = Tree;",
				"\tdfssz(1, 0), dfsid(1, 0);",
			"}",
		],
		"description": "Log output to console"
	}
}