{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gfactorisation",
		"body": [
			"const int N = 1e6+5;",
			"int spf[N];",
			"vector<int> pfac, fac, prime;",
			"void spfac(int n){",
				"\tiota(spf,spf+n+1,0);",
				"\tfor(int i=2;i*i<=n;i++){",
					"\t\tif(spf[i]!=i)continue;",
					"\t\tfor(int c=i*i;c<=n;c+=i) if(spf[c]==c)spf[c]=i;",
				"\t}",
				"\tfor(int i=2;i<=n;i++) if(spf[i]==i) prime.push_back(i);",
			"}",
			"void primefactor(int n){",
				"\tpfac.clear(); while(n!=1) pfac.push_back(spf[n]), n/=spf[n];",
			"}",
			"void allfactors(int n){",
				"\tfac.clear();",
				"\tprimefactor(n);",
				"\tfac.push_back(1); //this is compulsory",
				"\tfor(int i=0;i<pfac.size();i++){",
					"\t\tn = i;",
					"\t\twhile(i+1<pfac.size() && pfac[i+1]==pfac[i]) ++i;",
					"\t\tint cur = pfac[i], en = fac.size();",
					"\t\tfor(int j=0; j<=(i-n); j++,cur*=pfac[i]){",
						"\t\t\tfor(int l=0;l<en;l++){",
							"\t\t\t\tfac.push_back(fac[l]*cur);",
						"\t\t\t}",
					"\t\t}",
				"\t}",
			"}",
		],
		"description": "Log output to console"
	}
}