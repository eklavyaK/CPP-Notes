{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gcombinations2",
		"body": [
			"vector<vector<int>> ans;",
			"vector<int> track;",
			"vector<int> arr;",
			"void Combinations(int start, int cnt , int r, int n){",
			"	if(cnt == r){",
			"		ans.push_back(track);",
			"		return;",
			"	}",
			"	if(start == n)return;",
			"	for(int i=start;i<n;i++){",
			"		track.push_back(arr[i]);",
			"		Combinations(i+1,cnt+1,r,n);",
			"		//while(i+1<n && arr[i+1]==arr[i])i++;   //-----------> uncomment this to get all the distinct combinations (if array has duplicates) and vector arr must be sorted",
			"		track.pop_back();",
			"	}",
			"}",
			"vector<vector<int>> nCr(vector<int> all, int n,int r){",
			"	ans.clear();track.clear();",
			"	if(r>n)return ans;arr = all;",
			"	sort(arr.begin(),arr.end());   //sorting gives lexicographic ordered ans of Combinations and  is necessary for distinct combinations",
			"	Combinations(0,0,r,n);",
			"	return ans;",
			"}",
		],
		"description": "Log output to console"
	}
}