{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gdisjoint_gset_gunion",
		"body": [
			"const int N = 2e5;",
			"int parent[N+1];",
			"int szn[N+1];",
			"void make(int n){",
			"\tfor(int i=0;i<=n;i++){",
			"\t\tparent[i]=i;szn[i]=1;",        //Inverse Ackermann function approach
			"\t}",
			"}",
			"int parent_set(int x){",
			"\tif(x==parent[x])return x;",        //path compression approach
			"\treturn parent[x]=parent_set(parent[x]);",
			"}",
			"void merge_sets(int u, int v){",
			"\tu = parent_set(u);v = parent_set(v);",
			"\tif(u!=v){",
			"\t\tif(szn[u]<szn[v])swap(u,v);",
			"\t\tparent[v]=u; szn[u]+=szn[v];",
			"\t}",
			"}",
		],
		"description": "Log output to console"
	}
}