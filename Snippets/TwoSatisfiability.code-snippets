{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_g2sat",
		"body": [
			"const int N = 1e5+5;              //maximum number of nodes",
			"vector<int> ans[2*N];",
			"vector<vector<int>> graph(2*N);  //2 has been multiplied to include 'inclusion' and 'non-inclusion' of a node",
			"vector<vector<int>> revgraph(2*N);",
			"int vis[2*N],order[2*N],n,m,cnt=1;",
			"stack<int> comps;",
			"void dfs(int node){",
				"\tvis[node]=1;",
				"\tfor(auto i : graph[node]){",
					"\t\tif(!vis[i]) dfs(i);",
				"\t}",
				"\tcomps.push(node);",
			"}",
			"void revdfs(int node){",
				"\tvis[node]=0;",
				"\tans[cnt].push_back(node);",
				"\tfor(auto i : revgraph[node]){",
					"\t\tif(vis[i]) revdfs(i);",
				"\t}",
			"}",
			"void SCC(){",
				"\tfor(int v=1;v<=n;v++){",
					"\t\tfor(auto u : graph[v])",
					"\t\trevgraph[u].push_back(v);",
				"\t}",
				"\tfor(int i=1;i<=n;i++){",
					"\t\tif(!vis[i]) dfs(i);",
				"\t}",
				"\twhile(!comps.empty()){",
					"\t\tint c = comps.top();",
					"\t\tcomps.pop();",
					"\t\tif(!vis[c])continue;",
					"\t\trevdfs(c); cnt++;",
				"\t}",
			"}",
			"void add_junction(bool cnfa, int a, bool cnfb, int b){",
				"\tif(cnfa){",
					"\t\tif(cnfb){",
						"\t\t\tgraph[n+a].push_back(b);",
						"\t\t\tgraph[n+b].push_back(a);",
					"\t\t}",
					"\t\telse{",
						"\t\t\tgraph[n+a].push_back(n+b);",
						"\t\t\tgraph[b].push_back(a);",
					"\t\t}",
				"\t}",
				"\telse{",
					"\t\tif(cnfb){",
						"\t\t\tgraph[a].push_back(b);",
						"\t\t\tgraph[n+b].push_back(n+a);",
					"\t\t}",
					"\t\telse{",
						"\t\t\tgraph[a].push_back(n+b);",
						"\t\t\tgraph[b].push_back(n+a);",
					"\t\t}",
				"\t}",
			"}",
			"void solve_2SAT(int nodes, int junctions){",
				"\tn=nodes;",
				"\twhile(junctions--){",
					"\t\tchar ca,cb; int a,b;",
					"\t\tcin>>ca>>a>>cb>>b;",
					"\t\tbool cnfa = (ca=='-'?false:true);",
					"\t\tbool cnfb = (cb=='-'?false:true);",
					"\t\tadd_junction(cnfa,a,cnfb,b);",
					"\t\t//cnfa, cnfb denotes whether a and b are included or not if cnfa is true means a is included same goes for cnfb",
				"\t}",
				"\tn = nodes*2;",
				"\tSCC();",
				"\tfor(int i=1;i<=n;i++){",
					"\t\tfor(auto u : ans[i]){",
						"\t\t\torder[u]=i;",
					"\t\t}",
				"\t}",
				"\tn/=2;",
				"\tchar result[n+1];",
				"\tfor(int i=1;i<=n;i++){",
					"\t\tif(order[n+i]==order[i]){",
						"\t\t\tcout<<\"IMPOSSIBLE\"<<endl;",
						"\t\t\treturn;",
					"\t\t}",
					"\t\telse{",
						"\t\t\tresult[i]=order[n+i]>order[i]?'-':'+';",
					"\t\t}",
				"\t}",
				"\tfor(int i=1;i<=n;i++){",
					"\t\tcout<<result[i]<<' ';",
				"\t}",
			"}",
		],
		"description": "Log output to console"
	}
}