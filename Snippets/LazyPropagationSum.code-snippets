{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_glazy_gsum_gsegment_gtree",
		"body": [
			"const int N = 3e5;",
			"int T[N * 4], L[N * 4], dp[N];",
			"void pushdown(int node, int mid, int l, int r){",
				"\tL[2 * node] += L[node];",
				"\tL[2 * node + 1] += L[node];",
				"\tT[2 * node] += L[node] * (mid - l + 1);",
				"\tT[2 * node + 1] += L[node] * (r - mid);",
				"\tL[node] = 0;",
			"}",
			"void update(int node, int l, int r, int st, int en, int c){",
				"\tif(en < st || st > r || en < l) return;",
				"\tif(st <= l && en >= r){",
					"\t\tT[node] += c * (r - l + 1), L[node] += c;",
					"\t\treturn;",
				"}",
				"\tint mid = (l + r) >> 1;",
				"\tpushdown(node, mid, l, r);",
				"\tupdate(2 * node, l, mid, st, en, c);",
				"\tupdate(2 * node + 1, mid + 1, r, st, en, c);",
				"\tT[node] = T[2 * node] + T[2 * node + 1];",
			"}",
			"int query(int node, int l, int r, int st, int en){",
				"\tif(en < st || st > r || en < l) return 0;",
				"\tif(st <= l && en >= r) return T[node];",
				"\tint mid = (l + r) >> 1;",
				"\tpushdown(node, mid, l, r);",
				"\treturn query(2 * node, l, mid, st, en) + query(2 * node + 1, mid + 1, r, st, en);",
			"}",
		],
		"description": "Log output to console"
	}
}