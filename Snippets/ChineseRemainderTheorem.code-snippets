{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gchinese_gremainder_gtheorem",
		"body": [
			"struct triples{",
			"\tint g, x, y;",
			"};",
			"triples extendedEuclidean(int a, int b){",
			"\ttriples ans;",
			"\tif(!b){",
			"\t\tans.x = 1;",
			"\t\tans.y = 0;",
			"\t\tans.g = a;",
			"\t\treturn ans;",
			"\t}",
			"\ttriples curr = extendedEuclidean(b,a%b);",
			"\tans.x = curr.y;",
			"\tans.y = curr.x - curr.y*(a/b);",
			"\tans.g = curr.g;",
			"\treturn ans;",
			"}",
			"int merge(int a, int n, int b, int m, int lc){",
			"\ttriples curr = extendedEuclidean(n,m);",
			"\tif((b-a) % curr.g != 0) return -1;",
			"\tint r = ((b-a)/curr.g) % (m/curr.g);",
			"\tcurr.x = (curr.x % (m/curr.g) + (m/curr.g)) % (m/curr.g);",
			"\tint u = r * curr.x % (m/curr.g);",
			"\tint ans =  (a + u * n % lc) % lc;",
			"\treturn (ans % lc + lc) % lc;",
			"}",
			"int CRT(vector<int> a, vector<int> m){    // vectors of remainders (a) when x is divided by values (m)",
			"\tint n = a.size();",
			"\tif(n==0) return -1;",
			"\tfor(int i=0;i<n;i++){",
			"\t\tif(m[i]==0) return -1;",
			"\t\ta[i] = a[i]%m[i];",
			"\t}",
			"\tint r = a[0], lc = m[0];",
			"\tfor(int i=1;i<n;i++){",
			"\t\tint lcm = lc*m[i]/gcd(lc,m[i]);",
			"\t\tr = merge(r,lc,a[i],m[i],lcm);",
			"\t\tif(r==-1) return -1;",
			"\t\tlc = lcm;",
			"\t}",
			"\treturn r;",
			"}",
		],
		"description": "Log output to console"
	}
}