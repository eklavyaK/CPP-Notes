{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "gggg_gnearest_gmaximumminimum",
		"body": [
			"const int N = 2e5+5;",
			"vector<int> lnm(N,-1), rnm(N,-1); //vectors that contain the \"INDEX\" of left_nearest_maximum and right_nearest_maximum, if not present then -1",
			"void NearestMaximumMinimum(vector<int> &v) {",
			"	int n = v.size();",
			"	stack<pair<int,int>> st;",
			"	for(int i=0;i<n;i++){",
			"		while(!st.empty()){",
			"			if(st.top().first>v[i]){        //to find the nearest minimum reverse the sign to less than",
			"				lnm[i] = st.top().second;",
			"				break;",
			"			}",
			"			st.pop();                     //removing all the smaller values because for all the future elements current element will be nearer",
			"		}",
			"		st.push({v[i],i});",
			"	}",
			"	while(!st.empty())st.pop();",
			"	for(int i=n-1;i>=0;i--){",
			"		while(!st.empty()){",
			"			if(st.top().first>v[i]){       //to find the nearest minimum reverse the sign to less than",
			"				rnm[i] = st.top().second;",
			"				break;",
			"			}",
			"			st.pop();                     //removing all the larger values because for all the future elements current element will be nearer",
			"		}",
			"		st.push({v[i],i});",
			"	}",
			"}",
		],
		"description": "Log output to console"
	}
}